package pl.playwithme.smo.Security;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.security.KeyFactory;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public final class RsaKeyLoader {

    private static final String PRIVATE_KEY_FILE = "rsaPrivateKey.pem";
    private static final String PUBLIC_KEY_FILE = "rsaPUBLICKey.pem";

    public RSAPrivateKey loadPrivateKey() {
        return loadPemRsaPrivateKey();
    }

    public RSAPublicKey loadPublicKey() {
        return loadPemRsaPublicKey();
    }

    /**
     * Loads a file from the classpath and returns it as String
     * File generated by commad "openssl genpkey -algorithm RSA -out private_key.pem"
     *
     * @return
     * @throws IOException
     */
    private String readFile(String fileName) throws IOException {
        var filePath = getClass()
                .getClassLoader()
                .getResource(fileName)
                .getFile();
        final File file = new File(filePath);

        return new String(Files.readAllBytes(file.toPath()));
    }

    /**
     * Loads the RSA private key from a PKCS#8 PEM file
     *
     * @return
     * @throws Exception
     */
    private RSAPrivateKey loadPemRsaPrivateKey() {
        try {
            String pemString = readFile(PRIVATE_KEY_FILE);

            String privateKeyPEM = pemString.replace("-----BEGIN PRIVATE KEY-----", "")
                    .replaceAll(System.lineSeparator(), "")
                    .replace("-----END PRIVATE KEY-----", "");


            byte[] encoded = Base64.getDecoder().decode(privateKeyPEM);
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");

            return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
        } catch (Exception e) {
            return null;
        }
    }

    private RSAPublicKey loadPemRsaPublicKey() {
        try {
            String pemString = readFile(PUBLIC_KEY_FILE);

            String publicKeyPem = pemString.replace("-----BEGIN PUBLIC KEY-----", "")
                    .replaceAll(System.lineSeparator(), "")
                    .replace("-----END PUBLIC KEY-----", "");

            byte[] encoded = Base64.getDecoder().decode(publicKeyPem);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
            return (RSAPublicKey) keyFactory.generatePublic(keySpec);
        } catch (Exception e) {
            return null;
        }
    }
}
